name: Build iStoreOS

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: 43 6 * * *

env:
  REPO_URL: https://github.com/istoreos/istoreos
  REPO_BRANCH: v22.03.7
  FEEDS_CONF: feeds.conf.default
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai
  # KERNEL_VERSION: 6.1.79

jobs:
  build_openwrt:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        target: [N1, x86]  # 使用矩阵来并行化构建不同的目标
        include:
          - target: N1
            feeds_file: feeds/iStoreOS/feeds.buildinfo
            config_file: config/iStoreOS/N1.config
            cpu_warning: "已知编译成功CPU型号：8370C,8171M"
            use_ngrok: false
            use_sleep: false
          - target: x86
            feeds_file: feeds/iStoreOS/feeds.buildinfo
            config_file: config/iStoreOS/X86.config
            cpu_warning: "已知编译成功CPU型号：8370C,8171M"
            use_ngrok: true
            use_sleep: true
    steps:
    - name: 检出
      uses: actions/checkout@main

    - name: Setup SSH tunnel
      if: ${{ matrix.use_ngrok == true }}
      uses: qiaodapei/github-ngrok-ssh@main
      with:
        timeout: 6h
        ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        ngrok_token: ${{ secrets.NGROK_TOKEN }}

    - name: 清理磁盘 (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: true
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true

    - name: 检查服务器配置
      run: |
        echo "警告⚠"
        echo "${{ matrix.cpu_warning }}"
        echo "已知性能不足CPU型号：8272CL"
        echo -e "-------------- ------------CPU信息------------------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt -y purge azure-cli ghc* zulu* texlive* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        sudo -E apt update
        sudo -E apt -y install clang llvm lld qemu-utils 
        sudo -E apt -y install binutils bzip2 diff find flex gawk gcc-6+ getopt grep install libc-dev libz-dev
        make4.1+ perl python3.6+ rsync subversion unzip which
        sudo -E apt -y autoremove --purge
        sudo -E systemctl daemon-reload
        sudo -E apt clean && sudo -E apt autoclean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir
        echo "status=success" >> ${GITHUB_OUTPUT}
        df -Th

    - name: 克隆源代码
      working-directory: /mnt/workdir
      run: |
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
        echo "tag_name=$(date +%Y%m%d)" >> $GITHUB_ENV
        
    - name: 加载自定义源
      run: |
        [ -e ${{ matrix.feeds_file }} ] && mv ${{ matrix.feeds_file }} openwrt/feeds.conf.default
        # cd openwrt
        # sed -i '1i src-git kenzo https://github.com/kenzok8/openwrt-packages' feeds.conf.default
        # sed -i '2i src-git small https://github.com/kenzok8/small' feeds.conf.default
        # sed -i '3i src-git linkease_nas https://github.com/linkease/nas-packages.git' feeds.conf.default
        # sed -i '4i src-git linkease_nas_luci https://github.com/linkease/nas-packages-luci.git' feeds.conf.default
        # sed -i '5i src-git ota https://github.com/breeze303/luci-app-ota.git;main' feeds.conf.default

    - name: 更新源
      run: |
        cd openwrt && ./scripts/feeds update -a
        rm -rf feeds/luci/applications/luci-app-mosdns
        rm -rf feeds/packages/net/{alist,adguardhome,mosdns,xray*,v2ray*,sing*,smartdns}
        rm -rf feeds/packages/utils/v2dat
        rm -rf feeds/packages/lang/golang
        git clone https://github.com/kenzok8/golang feeds/packages/lang/golang

    - name: 安装源
      run: cd openwrt && ./scripts/feeds install -a

    - name: 自定义配置iStoreOS
      run: |
        cd openwrt
        # 修改默认IP为 192.168.9.1
        sed -i 's/192.168.1.1/192.168.9.1/g' package/base-files/files/bin/config_generate
        # sed -i 's/192.168.1.1/192.168.9.1/g' package/base-files/luci2/bin/config_generate
        # 修改默认主机名为MiyaWrt
        # sed -i '/uci commit system/i\uci set system.@system[0].hostname='iStoreOS'' package/lean/default-settings/files/zzz-default-settings
        # sed -i "13i uci set network.lan.ifname='eth1 eth2 eth3'" package/lean/default-settings/files/zzz-default-settings
        # sed -i "14i uci set network.wan.ifname='eth0'" package/lean/default-settings/files/zzz-default-settings
        # sed -i '13i uci set network.lan.ifname=''eth1 eth2 eth3'' package/lean/default-settings/files/zzz-default-settings
        # sed -i '14i uci set network.wan.ifname='eth0'' package/lean/default-settings/files/zzz-default-settings
        # 修改默认主题
        sed -i "s/luci-theme-bootstrap/luci-theme-argon/g" feeds/luci/collections/luci/Makefile
        sed -i "s/luci-theme-bootstrap/luci-theme-argon/g" feeds/luci/collections/luci-light/Makefile

    - name: 加载自定义配置
      run: |
        [ -e ${{ matrix.config_file }} ] && mv ${{ matrix.config_file }} openwrt/.config

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        rm -rf $GITHUB_WORKSPACE/.git
        rm -rf $GITHUB_WORKSPACE/opt
        df -Th
  
    - name: 编译固件
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "======================="
        echo "Space usage:"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin
        rm -rf ./build_dir
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Create release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.DATE }} ❤️ | iStoreOS 自动编译打包
        allowUpdates: true
        tag: ${{ env.tag_name }}
        commit: main
        token: ${{ secrets.ACTIONS_RELEASE }}
        body: |
          编译使用版本:
          ${{ env.useVersionInfo }}

          刷机固件简介：
            打包日期：${{ env.PACKAGED_OUTPUTDATE }}
            内核版本：${{ env.KERNEL_VERSION }}
            默认IP：192.168.9.1 默认用户名密码： root/password
        artifacts: "openwrt/bin/targets/*/*/*"

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.3.2
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_RELEASE }}
        
    - name: 删除旧的工作流和固件
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ secrets.ACTIONS_RELEASE }}
        repository: ${{ github.repository }}
        delete_workflow_pattern: Build iStoreOS
        retain_days: 0
        keep_minimum_runs: 1
    - name: Keep ngrok running
      if: ${{ matrix.use_sleep == true }}
      run: |
        sleep 43200  # Sleep for 12 hours (7200 seconds)
        pkill ngrok  # Kill the ngrok process after 12 hours
