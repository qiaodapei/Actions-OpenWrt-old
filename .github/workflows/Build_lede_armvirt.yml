#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build lede armvirt N1

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
  schedule:
    - cron: 43 5 * * *


env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  SCRIPT_SH: script.sh
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: config/ARMv8.config
  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  TZ: Asia/Shanghai
  FILE_NAME: lede_armvirt_n1
  PRODUCT_NAME: armvirt
  KERNEL_VERSION: 6.1.79



jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    steps:
    - name: 检出
      uses: actions/checkout@main
    - name: Setup SSH tunnel
      uses: qiaodapei/github-ngrok-ssh@main
      with:
        timeout: 6h
        ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
        ngrok_token: ${{ secrets.NGROK_TOKEN }}
    - name: 清理磁盘 (Ubuntu)
      uses: jlumbroso/free-disk-space@main
      with:
        # this might remove tools that are actually needed,
        # if set to "true" but frees about 6 GB
        tool-cache: true

        # all of these default to true, but feel free to set to
        # "false" if necessary for your workflow
        android: true
        dotnet: true
        haskell: true
        large-packages: true
        swap-storage: true

    - name: 检查服务器配置
      run: |
        echo "警告⚠"
        echo "若分配的服务器性能不足，务必及时取消，重新运行！"
        echo "已知编译成功CPU型号：8370C,8171M"
        echo "已知性能不足CPU型号：8272CL"
        echo -e "-------------- ------------CPU信息------------------------------------------\n"
        echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
        echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "-------------------------------内存信息-------------------------------------------"
        echo "已安装内存详细信息："
        sudo lshw -short -C memory | grep GiB
        echo -e "\n"
        echo "-----------------------------硬盘信息---------------------------------------------"
        echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
        echo "硬盘详情："
        df -Th
    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt -y purge azure-cli ghc* zulu* texlive* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        [[ -n "${AGENT_TOOLSDIRECTORY}" ]] && sudo rm -rf "${AGENT_TOOLSDIRECTORY}"
        #sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt update
        sudo -E apt -y install $(curl -fsSL https://is.gd/depends_ubuntu_2204)
        sudo -E apt -y install clang llvm lld
        #sudo -E apt-get -qq install libfuse-dev
        #sudo -E apt-get -qq install lib32z1-dev
        sudo -E apt -y autoremove --purge
        sudo -E systemctl daemon-reload
        sudo -E apt clean && sudo -E apt autoclean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /mnt/workdir
        sudo chown $USER:$GROUPS /mnt/workdir
        echo "status=success" >> ${GITHUB_OUTPUT}
        df -Th

    - name: 克隆源代码
      working-directory: /mnt/workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /mnt/workdir/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="Author: %an<br/>date: %cd<br/>commit: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
        echo "tag_name=$(date +%Y%m%d)" >> $GITHUB_ENV
        
    - name: 缓存工具链
      uses: stupidloud/cachewrtbuild@main
      with:
        mixkey: 'lede_armvirt_n1'
        ccache: true
        skip: true
        toolchain: true
        clean: false
        prefix: ${{ github.workspace }}/openwrt

    - name: 加载自定义源
      run: |
        sed -i '1i src-git kenzo https://github.com/kenzok8/openwrt-packages' feeds.conf.default
        sed -i '2i src-git small https://github.com/kenzok8/small' feeds.conf.default
        sed -i '3i src-git linkease_nas https://github.com/linkease/nas-packages.git' feeds.conf.default
        sed -i '4i src-git linkease_nas_luci https://github.com/linkease/nas-packages-luci.git' feeds.conf.default

    - name: 更新源
      run: |
        cd openwrt && ./scripts/feeds update -a
        rm -rf feeds/luci/applications/luci-app-mosdns
        rm -rf feeds/packages/net/{alist,adguardhome,mosdns,xray*,v2ray*,v2ray*,sing*,smartdns}
        rm -rf feeds/packages/utils/v2dat
        rm -rf feeds/packages/lang/golang
        git clone https://github.com/kenzok8/golang feeds/packages/lang/golang

    - name: 安装源
      run: cd openwrt && ./scripts/feeds install -a

    - name: 加载自定义配置
      run: |
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config

    - name: 自定义配置openwrt
      run: |
        cd openwrt
        # 修改默认IP为 192.168.9.1
        sed -i 's/192.168.1.1/192.168.9.1/g' package/base-files/files/bin/config_generate
        # 修改默认主机名为MiyaWrt
        sed -i '/uci commit system/i\uci set system.@system[0].hostname='iStoreOS'' package/lean/default-settings/files/zzz-default-settings
        # 修改默认主题
        sed -i "s/luci-theme-bootstrap/luci-theme-argon/g" feeds/luci/collections/luci/Makefile
        

    - name: 下载软件包
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        rm -rf $GITHUB_WORKSPACE/.git
        rm -rf $GITHUB_WORKSPACE/opt
        df -Th
  
    - name: 编译固件
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "status=success" >> ${GITHUB_OUTPUT}
        grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
        [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: 清理服务器空间
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd openwrt/
        #rm -rf $(ls . | grep -v "^bin$\|^tools$\|^toolchain$\|.ccache\|staging_dir\|^cache-openwrt" | xargs) 2>/dev/null
        rm -rf $(ls . | grep -v "^bin$" | xargs) 2>/dev/null
        df -hT ${PWD}
    - name: 上传bin目录
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: openwrt/bin
    - name: 整理文件
      id: organize
      if: steps.compile.outputs.status == 'success' && !cancelled()
      run: |
        cd $GITHUB_WORKSPACE/openwrt/bin/packages
        tar -zcvf Packages.tar.gz ./*
        cp Packages.tar.gz $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        cd $GITHUB_WORKSPACE/openwrt/bin/targets/*/*
        rm -rf packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "status=success" >> ${GITHUB_OUTPUT}
    - name: 上传固件目录
      uses: actions/upload-artifact@main
      if: env.UPLOAD_FIRMWARE == 'true' && steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware${{ env.DEVICE_NAME }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}
    - name: 创建发布版本
      id: release
      uses: ncipollo/release-action@main
      with:
        name: ${{ env.DATE }} OpenWrt for ${{ env.PRODUCT_NAME }}
        allowUpdates: true
        tag: ${{ env.FILE_NAME }}
        commit: main
        token: ${{ secrets.RELEASES_TOKEN }}
        body: |
          - 此为lede_armvirt_N1底包，非完整固件，每天自动编译
          - 当前使用版本:【编译前的最后一次[➦主源码](https://github.com/coolsnowwolf/lede)更新记录】
          ${{ env.useVersionInfo }}
        artifacts: ${{ env.FIRMWARE }}/*

    - name: 删除旧的工作流和固件
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ secrets.ACTIONS_RELEASE }}
        repository: ${{ github.repository }}
        delete_workflow_pattern: Build lede armvirt N1
        retain_days: 30
        keep_minimum_runs: 30

    - name: 删除旧的发布版本
      uses: dev-drprasad/delete-older-releases@v0.3.3
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        #repo:
        keep_latest: 10
        delete_tag_pattern: lede_armvirt_n1
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.ACTIONS_RELEASE }}

    #- name: Telegram notification
    #  run: |
    #    MSG="
    #    编译时间：${{ env.DATE }}
    #    OpenWrt 更新信息：${{ env.useVersionInfo }}
    #    ${{ env.PRODUCT_NAME }} 编译完成
    #    "
    #    curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage" -d "chat_id=${{ secrets.TELEGRAM_TO }}&text=${MSG}"
    - name: Keep ngrok running
      if: always()
      run: |
        sleep 43200  # Sleep for 12 hours (7200 seconds)
        pkill ngrok  # Kill the ngrok process after 12 hours
